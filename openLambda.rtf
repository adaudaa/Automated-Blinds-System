{\rtf1\ansi\ansicpg1252\cocoartf2758
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 import \{ IoTDataPlaneClient, PublishCommand \} from "@aws-sdk/client-iot-data-plane";\
\
export const handler = async (event, context, callback) => \{\
    const client = new IoTDataPlaneClient(\{ region: "us-east-1" \});\
\
\
    const topic = "blindsCommand"; // The MQTT topic your device is subscribed to\
    //const message = JSON.stringify(\{ command:"OPEN"\});\
    const message = "OPEN";\
\
    const params = \{\
        topic: topic,\
        payload: Buffer.from(message),\
        qos: 0\
    \};\
\
    try \{\
        const command = new PublishCommand(params);\
        const response = await client.send(command);\
        console.log("Message published:", response);\
        return \{ statusCode: 200, body: JSON.stringify(\{status:'ok', message: 'Message sent' \}) \};\
    \} catch (error) \{\
        console.error("Error publishing message:", error);\
        return \{ statusCode: 500, body: JSON.stringify(\{status:'error', message: 'Error sending message' \}) \};\
    \}\
\};\
}